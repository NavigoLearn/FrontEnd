---
import RoadmapLayout from '@layouts/RoadmapLayout.astro';
import RoadmapWithNotifications from '@src/components/roadmap/RoadmapWithNotifications';
import PagesDisplayManager from '@components/roadmap/pages-roadmap/PagesDisplayManager';
import { IRoadmapApi } from '../../types/explore_old/card';
import RequestManager from '../../components/misc/RequestManager';
import FullScreenPopupManager from '../../components/roadmap/pages-roadmap/FullScreenPopupManager';
import {adapterRoadmapToStatistics} from "../../store/roadmap-refactor/roadmap-data/misc-data/roadmap-statistics";
import {setRoadmapStatistics} from "../../store/roadmap-refactor/roadmap-data/misc-data/roadmap-statistics";
import {adapterRoadmapToStatistics} from "../../store/roadmap-refactor/roadmap-data/misc-data/roadmap-statistics";

const { roadmapPath } = Astro.params;
// here we should get the roadmap-roadmap-data for the actual roadmap_static
const isCreate = roadmapPath === 'create';
// parse number at the end of the id
const id = roadmapPath.match(/(\d+)(?!.*\d)/)?.[0];



let roadmap: IRoadmapApi;
let title = 'Create a roadmap';
let description = 'Create a roadmap to share your knowledge with the world!';
let url = `https://navigolearn.com/roadmap/create`;
let type = 'article';

// if id is not a number, redirect to explore
if (!!id && !!isCreate) {
    throw new Error('Invalid roadmap path no id no create wtf ur doin mate?');
}


if (typeof id === 'string') {
  // fetches roadmapData from api
  const response = await fetch(`${Astro.site}api/roadmaps/${id}`);
  const requestResponseJson = await response.json();
  roadmap = requestResponseJson.data;
  // decodes the roadmap-roadmap-data field from base64 to json
    if (!roadmap) {
        throw new Error('Roadmap not found');
    }
  roadmap.data = JSON.parse(atob(roadmap.data));
  roadmap.miscData= JSON.parse(atob(roadmap.miscData));

  const formattedName =
    (roadmap?.name || 'untitled')
      .replace(/\s+/g, '-')
      .toLowerCase()
      .slice(0, 32) +
    '-' +
    id;

  if (formattedName !== roadmapPath) {
    return Astro.redirect(`/roadmap/${formattedName}`, 301);
  }

  title = roadmap.name;
  description = `${roadmap.description.slice(0, 100)}${
    roadmap.description.length > 100 ? '...' : ''
  } - ${roadmap.name} on NavigoLearn`;
  url = `https://navigolearn.com/roadmap/${roadmapPath}`;
  type = 'article';
}
---

<RoadmapLayout
  metadata={{
    title,
    description,
    url,
    type,
  }}
  excludeFooter={true}
>
  <RequestManager client:load />
  <FullScreenPopupManager client:load isCreate={isCreate} />

  <div class='h-[calc(100vh-64px)] md:mt-0 relative w-full'>
    <!-- offset from nav reduced from total screen size -->
    <div class='h-full relative'>
      <RoadmapWithNotifications
        pageId={roadmapPath}
        roadmap={roadmap}
        client:load
      />
    </div>
    <div class='w-full h-full'>
      <PagesDisplayManager client:idle />
    </div>
  </div>
</RoadmapLayout>
