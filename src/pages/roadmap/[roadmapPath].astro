---
import Base from '@layouts/Base.astro';
import PageViewCollection from '@components/home/PageViewCollection';
import TopBarRoadmap from '@components/roadmap/top-bar/TopBarRoadmap';
import Roadmap from '@components/roadmap/Roadmap';
import SideBar from '@components/roadmap/sidebar/NewSidebarDesktop';
// import SideBarMobile from '@components/roadmap/sidebar/SideBarMobile';
import RoadmapController
  from '@components/roadmap/roadmapcontroler/RoadmapController';
import DisplayManager from '../../components/roadmap/displayers/DisplayManager';
import { RoadmapTypeApi } from '../../types/explore/card';

const { roadmapPath } = Astro.params;
// here we should get the roadmap-roadmap-data for the actual roadmap_static
const isCreate = roadmapPath === 'create';

// parse number at the end of the id
const id = roadmapPath.match(/\d+/g)?.[0];

let roadmap: RoadmapTypeApi;
let title = 'Create a roadmap';
let description = 'Create a roadmap to share your knowledge with the world!';
let url = `https://navigolearn.com/roadmap/create`;
let type = 'article';

// if id is not a number, redirect to explore
if (!!id && !!isCreate) {
  return Astro.redirect('/explore');
}

if (typeof id === 'string') {
  try {
    // fetches roadmapData from api
    const response = await fetch(`${Astro.site}api/roadmaps/${id}`);

    roadmap = await response.json();

    // decodes the roadmap-roadmap-data field from base64 to json
    roadmap.data = JSON.parse(atob(roadmap.data));

    if (!roadmap) {
      return Astro.redirect('/explore');
    }

    const formattedName = (roadmap?.name || 'untitled')
      .replace(/\s+/g, '-')
      .toLowerCase()
      .slice(0, 32) + '-' + id;

    if (formattedName !== roadmapPath) {
      return Astro.redirect(`/roadmap/${formattedName}`, 301);
    }

    title = roadmap.name;
    description = `${roadmap.description.slice(0, 100)}${roadmap.description.length > 100 ? '...' : ''} - ${roadmap.name} on NavigoLearn`;
    url = `https://navigolearn.com/roadmap/${roadmapPath}`;
    type = 'article';
  } catch (e) {
    console.error(e);
    return Astro.redirect('/explore');
  }
}
---

<Base metadata={{
  title,
  description,
  url,
  type,
}} excludeFooter={true}>
  <!-- <div class="h-[100%] w-[100%] bg-[#1A1B504D] absolute top-0 z-30 flex justify-center items-center">
    <SetupScreen client:idle />
  </div> -->

  <PageViewCollection page='Roadmap' client:load />
  <div class='absolute w-full top-0 h-16 bg-white z-[-10]'></div>

  <div class='h-[calc(100vh-64px)] md:mt-0 relative w-full'>
      <!-- offset from nav reduced from total screen size -->
      <div class='h-full relative'>
          <!--<TopBarRoadmap client:idle />-->
          <Roadmap pageId={roadmapPath} roadmap={roadmap} client:load />
      </div>

      <div class='hidden opacity-100 bg-white md:block'>
          <SideBar isCreate={isCreate} client:idle />
      </div>
      <div class='absolute bottom-3 md:left-28 left-0'>
          <RoadmapController client:idle />
      </div>
      <div class='w-full h-full'>
          <DisplayManager client:idle />
      </div>
  </div>
</Base>
